import java.time.LocalDateTime;

public class TransactionRecord {
    // Private fields to encapsulate sensitive data
    private String buyerTIN;
    private String sellerTIN;
    private double invoiceAmount;
    private LocalDateTime transactionTimestamp;

    // Public getter and setter methods for controlled access
    public String getBuyerTIN() {
        return buyerTIN;
    }

    public void setBuyerTIN(String buyerTIN) {
        // Validate TIN format before setting
        if (buyerTIN != null && buyerTIN.matches("\\d{10}")) {
            this.buyerTIN = buyerTIN;
        } else {
            throw new IllegalArgumentException("Invalid TIN format");
        }
    }

    public String getSellerTIN() {
        return sellerTIN;
    }

    public void setSellerTIN(String sellerTIN) {
        if (sellerTIN != null && sellerTIN.matches("\\d{10}")) {
            this.sellerTIN = sellerTIN;
        } else {
            throw new IllegalArgumentException("Invalid TIN format");
        }
    }

    public double getInvoiceAmount() {
        return invoiceAmount;
    }

    public void setInvoiceAmount(double invoiceAmount) {
        if (invoiceAmount >= 0) {
            this.invoiceAmount = invoiceAmount;
        } else {
            throw new IllegalArgumentException("Amount cannot be negative");
        }
    }

    public LocalDateTime getTransactionTimestamp() {
        return transactionTimestamp;
    }

    public void setTransactionTimestamp(LocalDateTime transactionTimestamp) {
        // Ensure timestamp is not in the future
        if (transactionTimestamp.isAfter(LocalDateTime.now())) {
            throw new IllegalArgumentException("Timestamp cannot be in the future");
        }
        this.transactionTimestamp = transactionTimestamp;
    }

    // Main method to test the class
    public static void main(String[] args) {
        // Create a new transaction record
        TransactionRecord transaction = new TransactionRecord();

        try {
            // Set valid values
            transaction.setBuyerTIN("1234567890");
            transaction.setSellerTIN("0987654321");
            transaction.setInvoiceAmount(100000.0);
            transaction.setTransactionTimestamp(LocalDateTime.now());

            // Print the values
            System.out.println("Transaction Details:");
            System.out.println("Buyer TIN: " + transaction.getBuyerTIN());
            System.out.println("Seller TIN: " + transaction.getSellerTIN());
            System.out.println("Amount: " + transaction.getInvoiceAmount());
            System.out.println("Timestamp: " + transaction.getTransactionTimestamp());

            // Test invalid values (will throw exceptions)
            // transaction.setBuyerTIN("123"); // Invalid TIN
            // transaction.setInvoiceAmount(-100); // Negative amount
            // transaction.setTransactionTimestamp(LocalDateTime.now().plusDays(1)); // Future date
        } catch (IllegalArgumentException e) {
            System.err.println("Error: " + e.getMessage());
        }
    }
}
